name: Create Linear Sub-Issues (016)

on:
  workflow_dispatch:
    inputs:
      parent_issue:
        description: 'Parent Linear Issue ID (e.g., PRI-1514)'
        required: true
        default: 'PRI-1514'
      tasks_file:
        description: 'Path to tasks.md file'
        required: true
        default: 'specs/016-week-4-finisher/tasks.md'

jobs:
  create-sub-issues:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Create Linear Sub-Issues
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
          PARENT_ISSUE: ${{ github.event.inputs.parent_issue || 'PRI-1514' }}
          TASKS_FILE: ${{ github.event.inputs.tasks_file || 'specs/016-week-4-finisher/tasks.md' }}
        run: |
          node << 'EOF'
          const fs = require('fs');
          const path = require('path');
          const https = require('https');

          const LINEAR_API_KEY = process.env.LINEAR_API_KEY;
          const PARENT_ISSUE = process.env.PARENT_ISSUE;
          const TASKS_FILE = process.env.TASKS_FILE;

          if (!LINEAR_API_KEY) {
            console.error('❌ Error: LINEAR_API_KEY not set in GitHub secrets');
            process.exit(1);
          }

          // Task definitions with dependencies
          const TASKS = [
            { id: 'T001', title: 'Establish Baseline Coverage Snapshot', type: 'setup', dependencies: [], priority: 1 },
            { id: 'T002', title: 'Create npm Script for Coverage with Thresholds', type: 'setup', dependencies: ['T001'], priority: 1 },
            { id: 'T003', title: 'Create Vitest Configuration Contract Test', type: 'test', dependencies: ['T002'], priority: 1 },
            { id: 'T004', title: 'Create GitHub Actions CI Contract Test', type: 'test', dependencies: ['T002'], priority: 1 },
            { id: 'T005', title: 'Create Review-Packet Integration Contract Test', type: 'test', dependencies: ['T002'], priority: 1 },
            { id: 'T006', title: 'Configure Vitest Coverage Thresholds', type: 'config', dependencies: ['T003'], priority: 1 },
            { id: 'T007', title: 'Update GitHub Actions Checks Workflow', type: 'config', dependencies: ['T004'], priority: 1 },
            { id: 'T008', title: 'Update Review-Packet Workflow for Coverage', type: 'config', dependencies: ['T005'], priority: 1 },
            { id: 'T009', title: 'Verify Exclusion Patterns Work Correctly', type: 'integration', dependencies: ['T006', 'T007', 'T008'], priority: 0 },
            { id: 'T010', title: 'Verify Threshold Enforcement (Pass Scenario)', type: 'integration', dependencies: ['T006', 'T007', 'T008'], priority: 0 },
            { id: 'T011', title: 'Document Coverage Policy & Requirements', type: 'docs', dependencies: ['T009', 'T010'], priority: 0 },
            { id: 'T012', title: 'Validate Vitest Config Test Pass', type: 'validation', dependencies: ['T006'], priority: 0 },
            { id: 'T013', title: 'Validate CI Workflow Test Pass', type: 'validation', dependencies: ['T007'], priority: 0 },
            { id: 'T014', title: 'Validate Review-Packet Integration Test Pass', type: 'validation', dependencies: ['T008'], priority: 0 },
            { id: 'T015', title: 'Run Full Test Suite & Verify All Tests Pass', type: 'summary', dependencies: ['T012', 'T013', 'T014'], priority: 1 },
          ];

          // Map to store created issue IDs
          const createdIssues = {};

          // GraphQL query to create a Linear issue
          function createIssue(task, dependencies) {
            const description = `Feature: 016-week-4-finisher - Configure and Enforce Coverage Thresholds
Parent: ${PARENT_ISSUE}
Type: ${task.type}

${task.description || task.title}

## Acceptance Criteria
- ✅ Task completed successfully
- ✅ All acceptance criteria from tasks.md met
- ✅ Code changes committed and pushed
- ✅ Tests passing (if applicable)
- ✅ Documentation updated (if applicable)`;

            const mutation = `
              mutation CreateIssue {
                issueCreate(input: {
                  teamId: "TEAM_ID"
                  title: "${task.id}: ${task.title.replace(/"/g, '\\"')}"
                  description: "${description.replace(/"/g, '\\"').replace(/\n/g, '\\n')}"
                  priority: ${task.priority}
                  parentId: "${PARENT_ISSUE}"
                }) {
                  success
                  issue {
                    id
                    identifier
                  }
                }
              }
            `;

            return new Promise((resolve, reject) => {
              const options = {
                hostname: 'api.linear.app',
                path: '/graphql',
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${LINEAR_API_KEY}`,
                },
              };

              const req = https.request(options, (res) => {
                let data = '';
                res.on('data', (chunk) => { data += chunk; });
                res.on('end', () => {
                  try {
                    const parsed = JSON.parse(data);
                    if (parsed.errors) {
                      console.error(`❌ Error creating ${task.id}:`, parsed.errors);
                      reject(new Error(parsed.errors[0].message));
                    } else {
                      const issueId = parsed.data?.issueCreate?.issue?.identifier;
                      if (issueId) {
                        createdIssues[task.id] = issueId;
                        console.log(`✅ Created ${issueId}: ${task.title}`);
                        resolve(issueId);
                      } else {
                        reject(new Error('No issue ID in response'));
                      }
                    }
                  } catch (e) {
                    reject(e);
                  }
                });
              });

              req.on('error', reject);
              req.write(JSON.stringify({ query: mutation }));
              req.end();
            });
          }

          async function main() {
            console.log('🚀 Creating Linear Sub-Issues\n');
            console.log(`📌 Parent Issue: ${PARENT_ISSUE}`);
            console.log(`📂 Tasks File: ${TASKS_FILE}\n`);

            // Verify file exists
            if (!fs.existsSync(TASKS_FILE)) {
              console.error(`❌ Error: File not found: ${TASKS_FILE}`);
              process.exit(1);
            }

            console.log('📋 Creating 15 sub-issues...\n');

            // Create issues sequentially to avoid rate limiting
            for (const task of TASKS) {
              try {
                await createIssue(task, task.dependencies);
                // Add small delay between requests
                await new Promise(resolve => setTimeout(resolve, 500));
              } catch (error) {
                console.error(`Error creating ${task.id}:`, error.message);
                // Continue with next task instead of failing completely
              }
            }

            console.log('\n✨ Sub-issue creation complete!\n');
            console.log('📊 Summary:');
            console.log(`   Created: ${Object.keys(createdIssues).length}/${TASKS.length}`);
            console.log(`   Parent: ${PARENT_ISSUE}`);
            console.log('\n🔗 Linear Issues:');
            Object.entries(createdIssues).forEach(([taskId, issueId]) => {
              console.log(`   ${taskId} → ${issueId}`);
            });
          }

          main().catch(error => {
            console.error('Fatal error:', error);
            process.exit(1);
          });
          EOF

      - name: Report Results
        if: always()
        run: |
          echo "✅ Linear sub-issues creation workflow completed"
          echo ""
          echo "📌 Check Linear for new sub-issues under: ${{ github.event.inputs.parent_issue || 'PRI-1514' }}"
          echo ""
          echo "🔗 Linear URL: https://linear.app/linear/project"
